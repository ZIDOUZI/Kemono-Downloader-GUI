<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DownloadPath.PrimaryText" xml:space="preserve">
    <value>Download Path</value>
  </data>
  <data name="DownloadPath.SecondaryText" xml:space="preserve">
    <value>The root directory of the download. Files and folders will be created under this directory as pattern.</value>
  </data>
  <data name="DownloadPathBox.PlaceholderText" xml:space="preserve">
    <value>Enter or select the download path.</value>
  </data>
  <data name="DownloadPathButton.Content" xml:space="preserve">
    <value>Select</value>
  </data>
  <data name="Introduction.Text" xml:space="preserve">
    <value>&lt;Span&gt;&lt;Bold&gt;{service}      &lt;/Bold&gt;Source sites such as fanbox, fantia, patreon.&lt;/Span&gt;&lt;LineBreak /&gt;
&lt;Span&gt;&lt;Bold&gt;{artist_id}    &lt;/Bold&gt;The id of the artist.&lt;/Span&gt;&lt;LineBreak /&gt;
&lt;Span&gt;&lt;Bold&gt;{artist}       &lt;/Bold&gt;The artist's name on kemono/commer. Not the name on the source site.&lt;/Span&gt;&lt;LineBreak /&gt;
&lt;Span&gt;&lt;Bold&gt;{date}         &lt;/Bold&gt;Date this post was published.&lt;/Span&gt;&lt;LineBreak /&gt;
&lt;Span&gt;&lt;Bold&gt;{title}        &lt;/Bold&gt;The title of this post.&lt;/Span&gt;&lt;LineBreak /&gt;
&lt;Span&gt;&lt;Bold&gt;{post_id}      &lt;/Bold&gt;ID of this post.&lt;/Span&gt;&lt;LineBreak /&gt;
&lt;Span&gt;&lt;Bold&gt;{time}         &lt;/Bold&gt;Date of download.&lt;/Span&gt;&lt;LineBreak /&gt;
&lt;Span&gt;&lt;Bold&gt;{index0}       &lt;/Bold&gt;(image only) The image sequence number when downloading, starting from the first image, is 0.&lt;/Span&gt;&lt;LineBreak /&gt;
&lt;Span&gt;&lt;Bold&gt;{_index0}      &lt;/Bold&gt;(image only) The image sequence number when downloading, starting from the first image, is 0. Add an underscore &lt;Bold&gt;before&lt;/Bold&gt; the number.&lt;/Span&gt;&lt;LineBreak /&gt;
&lt;Span&gt;&lt;Bold&gt;{index0_}      &lt;/Bold&gt;(image only) The image sequence number when downloading, starting from the first image, is 0. Add an underscore &lt;Bold&gt;after&lt;/Bold&gt; the number.&lt;/Span&gt;&lt;LineBreak /&gt;
&lt;Span&gt;&lt;Bold&gt;{index}        &lt;/Bold&gt;(image only) The image serial number when downloading, starting from the second image, is 1. The first image does not change.&lt;/Span&gt;&lt;LineBreak /&gt;
&lt;Span&gt;&lt;Bold&gt;{_index}       &lt;/Bold&gt;(image only) The image sequence number when downloading, starting from the second image, is 1. Add an underscore &lt;Bold&gt;before&lt;/Bold&gt; the number. The first image does not change.&lt;/Span&gt;&lt;LineBreak /&gt;
&lt;Span&gt;&lt;Bold&gt;{index_}       &lt;/Bold&gt;(image only) The image serial number when downloading, starting from the second image, is 1. Add an underscore &lt;Bold&gt;after&lt;/Bold&gt; the number. The first image does not change.&lt;/Span&gt;&lt;LineBreak /&gt;
&lt;Span&gt;&lt;Bold&gt;{name}         &lt;/Bold&gt;The name of the file on the server.&lt;/Span&gt;&lt;LineBreak /&gt;
&lt;Span&gt;&lt;Bold&gt;{auto_named}   &lt;/Bold&gt;The name of the file on the server. If the name is a 32-bit UUID, it will be replaced with a serial number (the first image is named cover)&lt;/Span&gt;&lt;LineBreak /&gt;</value>
  </data>
  <data name="Overwrite.PrimaryText" xml:space="preserve">
    <value>Overwrite</value>
  </data>
  <data name="Overwrite.SecondaryText" xml:space="preserve">
    <value>Whether to rewrite when downloading in the app. Does not affect the download of unfinished files.</value>
  </data>
  <data name="Pattern.PrimaryText" xml:space="preserve">
    <value>Pattern</value>
  </data>
  <data name="Pattern.SecondaryText" xml:space="preserve">
    <value>File and folder naming method. Drop down expander to view the specific method.</value>
  </data>
  <data name="RpcHost.PrimaryText" xml:space="preserve">
    <value>RPC Host</value>
  </data>
  <data name="RpcToken.PrimaryText" xml:space="preserve">
    <value>RPC Token</value>
  </data>
  <data name="RpcTokenBox.PlaceholderText" xml:space="preserve">
    <value>Do not enter if not.</value>
  </data>
  <data name="UseRpc.PrimaryText" xml:space="preserve">
    <value>Enable RPC</value>
  </data>
  <data name="UseRpc.SecondaryText" xml:space="preserve">
    <value>Whether to enable RPC. If enabled, please fill in the address and token</value>
  </data>
</root>