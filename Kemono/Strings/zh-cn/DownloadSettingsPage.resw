<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DownloadPath.PrimaryText" xml:space="preserve">
    <value>下载路径</value>
  </data>
  <data name="DownloadPath.SecondaryText" xml:space="preserve">
    <value>下载的根目录。文件和文件夹将按照命名方式在此目录下创建。</value>
  </data>
  <data name="DownloadPathBox.PlaceholderText" xml:space="preserve">
    <value>输入或选择下载路径</value>
  </data>
  <data name="DownloadPathButton.Content" xml:space="preserve">
    <value>选择</value>
  </data>
  <data name="Introduction.Text" xml:space="preserve">
    <value>&lt;Span&gt;&lt;Bold&gt;{service}      &lt;/Bold&gt;来源网站如fanbox、fantia、patreon。&lt;/Span&gt;&lt;LineBreak /&gt;
&lt;Span&gt;&lt;Bold&gt;{artist_id}    &lt;/Bold&gt;画师的ID。&lt;/Span&gt;&lt;LineBreak /&gt;
&lt;Span&gt;&lt;Bold&gt;{artist}       &lt;/Bold&gt;kemono/commer 上艺术家的名字。不是源站点上的名称。&lt;/Span&gt;&lt;LineBreak /&gt;
&lt;Span&gt;&lt;Bold&gt;{date}         &lt;/Bold&gt;此帖子的发布日期。&lt;/Span&gt;&lt;LineBreak /&gt;
&lt;Span&gt;&lt;Bold&gt;{title}        &lt;/Bold&gt;此帖子的标题。&lt;/Span&gt;&lt;LineBreak /&gt;
&lt;Span&gt;&lt;Bold&gt;{post_id}      &lt;/Bold&gt;此帖子的ID。&lt;/Span&gt;&lt;LineBreak /&gt;
&lt;Span&gt;&lt;Bold&gt;{time}         &lt;/Bold&gt;下载日期。&lt;/Span&gt;&lt;LineBreak /&gt;
&lt;Span&gt;&lt;Bold&gt;{index0}       &lt;/Bold&gt;(仅图像) 下载时的图片序号，从第一张图片开始，为0。&lt;/Span&gt;&lt;LineBreak /&gt;
&lt;Span&gt;&lt;Bold&gt;{_index0}      &lt;/Bold&gt;(仅图像) 下载时的图片序号，从第一张图片开始，为0。在序号&lt;Bold&gt;前&lt;/Bold&gt;加下划线。&lt;/Span&gt;&lt;LineBreak /&gt;
&lt;Span&gt;&lt;Bold&gt;{index0_}      &lt;/Bold&gt;(仅图像) 下载时的图片序号，从第一张图片开始，为0。在序号&lt;Bold&gt;后&lt;/Bold&gt;加下划线。&lt;/Span&gt;&lt;LineBreak /&gt;
&lt;Span&gt;&lt;Bold&gt;{index}        &lt;/Bold&gt;(仅图像) 下载时的图片序号，从第二张图片开始，为1，第一张图片不变。&lt;/Span&gt;&lt;LineBreak /&gt;
&lt;Span&gt;&lt;Bold&gt;{_index}       &lt;/Bold&gt;(仅图像) 下载时的图片序号，从第二张图片开始，为1。在序号&lt;Bold&gt;前&lt;/Bold&gt;加下划线。第一张图像不做更改。&lt;/Span&gt;&lt;LineBreak /&gt;
&lt;Span&gt;&lt;Bold&gt;{index_}       &lt;/Bold&gt;(仅图像) 下载时的图片序号，从第二张图片开始，为1。在序号&lt;Bold&gt;后&lt;/Bold&gt;加下划线。第一张图像不做更改。&lt;/Span&gt;&lt;LineBreak /&gt;
&lt;Span&gt;&lt;Bold&gt;{name}         &lt;/Bold&gt;服务器上文件的名称。&lt;/Span&gt;&lt;LineBreak /&gt;
&lt;Span&gt;&lt;Bold&gt;{auto_named}   &lt;/Bold&gt;服务器上文件的名称。如果名称是 32 位 UUID，将替换为序列号（第一个图像命名为cover）&lt;/Span&gt;&lt;LineBreak /&gt;</value>
  </data>
  <data name="Overwrite.PrimaryText" xml:space="preserve">
    <value>覆盖文件</value>
  </data>
  <data name="Overwrite.SecondaryText" xml:space="preserve">
    <value>在应用程序中下载时是否重写。不影响下载未完成的文件。</value>
  </data>
  <data name="Pattern.PrimaryText" xml:space="preserve">
    <value>命名方式</value>
  </data>
  <data name="Pattern.SecondaryText" xml:space="preserve">
    <value>文件和文件夹命名方法。下拉查看具体方法。</value>
  </data>
  <data name="RpcHost.PrimaryText" xml:space="preserve">
    <value>RPC地址</value>
  </data>
  <data name="RpcToken.PrimaryText" xml:space="preserve">
    <value>RPC Token</value>
  </data>
  <data name="RpcTokenBox.PlaceholderText" xml:space="preserve">
    <value>如无请勿输入</value>
  </data>
  <data name="UseRpc.PrimaryText" xml:space="preserve">
    <value>启用RPC</value>
  </data>
  <data name="UseRpc.SecondaryText" xml:space="preserve">
    <value>是否启用 RPC。如果启用，请填写地址和token</value>
  </data>
</root>